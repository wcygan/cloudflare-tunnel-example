name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_e2e:
        description: 'Run E2E tests (requires deployed tunnel)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run cargo fmt check
        run: cargo fmt -- --check
      
      - name: Run cargo clippy
        run: cargo clippy -- -D warnings
      
      - name: Run unit tests
        run: cargo test --lib --bins
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: target/debug/deps/*.json

  config-validation:
    name: Configuration Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - name: Run config validation tests
        run: deno task test:config
      
      - name: Validate Dockerfile syntax
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  docker-integration:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: cloudflare-tunnel-example:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Docker integration tests
        run: deno task test:docker
      
      - name: Upload container logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs
          path: |
            docker-compose.logs
            container-inspect.json

  build-multiarch:
    name: Multi-Architecture Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build for ${{ matrix.platform }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          tags: cloudflare-tunnel-example:latest-${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cloudflare-tunnel-example:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  integration-test-suite:
    name: Full Integration Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, config-validation, docker-integration]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.deno
            target/
          key: ${{ runner.os }}-test-deps-${{ hashFiles('**/Cargo.lock', '**/deno.lock') }}
      
      - name: Run full integration test suite
        run: |
          if [[ "${{ github.event.inputs.run_e2e }}" == "true" ]]; then
            deno task test:integration:e2e
          else
            deno task test:integration
          fi
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f test-results-*.json ]; then
            cat test-results-*.json | jq -r '
              "| Metric | Value |",
              "| --- | --- |",
              "| Total Tests | \(.total) |",
              "| Passed | \(.passed) |",
              "| Failed | \(.failed) |",
              "| Skipped | \(.skipped) |",
              "| Duration | \(.duration / 1000 | tostring + "s") |"
            ' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            test-results-*.json
            test-results/

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Build and start services
        run: |
          docker build -t cloudflare-tunnel-example:latest .
          docker compose up -d app
          sleep 10
      
      - name: Run performance tests
        run: |
          # Get container IP
          APP_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' cloudflare-tunnel-app)
          
          # Create k6 script
          cat > performance-test.js << EOF
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export const options = {
            stages: [
              { duration: '30s', target: 20 },
              { duration: '1m', target: 50 },
              { duration: '30s', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<100'],
              http_req_failed: ['rate<0.01'],
            },
          };
          
          export default function () {
            const responses = http.batch([
              ['GET', 'http://${APP_IP}:8080/'],
              ['GET', 'http://${APP_IP}:8080/health'],
            ]);
            
            check(responses[0], {
              'root status is 200': (r) => r.status === 200,
            });
            
            check(responses[1], {
              'health status is 200': (r) => r.status === 200,
              'health returns healthy': (r) => r.json('status') === 'healthy',
            });
            
            sleep(1);
          }
          EOF
          
          k6 run --out json=k6-results.json performance-test.js || true
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: k6-results.json
      
      - name: Clean up
        if: always()
        run: docker compose down -v